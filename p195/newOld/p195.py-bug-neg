import Euler
"""
P195

60° angle => c is the side opposite
Diophantine Equation: a²-a*b+b²=c²
=> b = (a+-sqrt(4*c²-3*a²))/2

Hypothese: only postive
=> b = (a+sqrt(4*c²-3*a²))/2

=> search for:
4*c²-3*a² = n² <=> (C²-3*a²) = n² with C = 2*c


Pell's equation:
a²-Ny²=k
solution: (m, 1, m²-N) => (a, y, k)
((a*m+N*b)/k, (a+b*m)/k, (m*m-N)/k)

C²-3*a² = k (=n²)
(m, 1, m²-3) => trivial solution, then
((C*m+3*b)/k, (C+b*m)/k, (m*m-3)/k)

list all trivial
for each trivial find : (m²-3)/k = n²

(1, 1, -2), (2, 1, 1), (3, 1, 6), (4, 1, 13)

ex:
(m²-3)/6 => m = 9
    k = 13, b = 2, a = 5 (5, 2, 13) 25-3*4 = 13

# (x1*x2+N*y1*y2, x1*y2+x2*y1, k1k2) (x1*x2-N*y1*y2, x1*y2-x2*y1, k1k2) other solutions
# (x1*x2+3*y1*y2, x1*y2+x2*y1, k1k2) (x1*x2-3*y1*y2, x1*y2-x2*y1, k1k2) other solutions
(2, 1, 1) (4, 1, 13)
(8+3, 2+4, 13) < 11²-3*6² = 
(8-3, 2-4, 13)

"""

#Trivial solutions

alls = set()
mMax = 10
ts = []
#for m in range(0,mMax): # do we need m=0 ?
for m in range(-mMax,mMax): # do we need m<0 ?
    ts.append((m, 1, m*m-3))
alls.add((2, 1, 1))
alls.add((-2, 1, 1))

#for all trivial solution find the multiplier needed to make it square
#ex: k1 = 12 => we need k2 multiple of 3 so that k1*k2 = n²
#kLsit = {mul: [k, ]} i.e. {6: [6, 24, ...]}
kList = {}
cnt = 0
#for t in alls:
for t in ts:
    (a,b,k) = t

    factors = Euler.factorization(k)
    if k<0:
        print(k)
        print(factors)
    mul = 1
    for f in factors:
        if factors[f]%2 == 1:# ignore the squares, etc
            mul *= f

    if mul in kList:
        kList[mul].append(t)
    else:
        kList[mul] = [t]

    #if(k>=0 and k<=10):
    #print("{}:\t{}".format(t,mul))
    cnt+=1
    #print(Euler.factorization(k))
    
print(cnt)

#combination k1k2: k1 and k2 not square beside 1, so combine with 1 and the k having the same mul together
# combination k and 1

# we are interested in k = n²
# 1 trivial solution works: m=1 => k = 1
# other solutions must be a combination k1*k2

for mul in kList:
    for t in kList[mul]:
        (x1, y1, k1) = t
        
        # try k2=1
        for (x2, y2, k2) in kList[1]:
            if k2 != 1:
                print("wut:\t{}".format((x2, y2, k2)))
            alls.add((x1*x2+3*y1*y2, x1*y2+x2*y1, k1*k2))
            alls.add((x1*x2-3*y1*y2, x1*y2-x2*y1, k1*k2))
            alls.add((x1*x2-3*y1*y2, x2*y1-x1*y2, k1*k2))

        # combination k1 and k2 having same mul
        for t2 in kList[mul]:
            (x2, y2, k2) = t2

            alls.add((x1*x2+3*y1*y2, x1*y2+x2*y1, k1*k2))
            alls.add((x1*x2-3*y1*y2, x1*y2-x2*y1, k1*k2))
            alls.add((x1*x2-3*y1*y2, x2*y1-x1*y2, k1*k2))

for t in alls:
    (a,b,k) = t
    if(k>=1 and k <=10):
        print(t)

